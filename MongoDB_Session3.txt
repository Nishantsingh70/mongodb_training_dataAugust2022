Session3 => 

db.inspections.insert([{ "_id": 1, "test": 1 },{ "_id": 1, "test": 2 },
                       { "_id": 3, "test": 3 }],{ "ordered": false })
					   
db.grades.updateOne({ "student_id": 250, "class_id": 339 },
                    { "$push": { "scores": { "type": "extra credit",
                                             "score": 100 }
                                }
                     })
					 
db.zips.updateMany({ "city": "HUDSON" }, { "$inc": { "pop": 10 } })

db.zips.updateOne({ "zip": "12534" }, { "$set": { "pop": 17630 } })

db.inspection.drop()

upsert command is the combination of update and insert 					   
					   
ETL (Aggregation Framework)
NoSQL(MongoDB) is used for flexible schema, improve performance, less storage wastage & document-oriented applications where we fetch data about any particular 
things like in Amazon website we look the details of any one product. we did not perform any average operation there.

download movies.json file from https://github.com/Nishantsingh70/Movies-json-dataset

C:\Users\Nishant Singh\Downloads\Movies-json-dataset-main\Movies-json-dataset-main\docs\data>mongoimport movies.json -d moviesdb -c movies --jsonArray

mongosh
use moviesdb;
show collections;
db.movies.find()
db.movies.findOne().Title

db.movies.find({"Source": null})

 use lwuser
 db.students.find()
 db.students.find({name: "vimal"})
 db.students.find({"purchased_courses.course_name": "MERN"})
 
Greateer than, Less than, Greateer than equal to, Less than equal to, equal to, in,  not in & not equal to operators:
 
 db.students.find({"purchased_courses.price": { $gt  :2400}})
 db.students.find({"purchased_courses.price": { $eq  :2400}})
 db.students.find({"purchased_courses.price": { $ne  :2400}})
 db.students.find({"purchased_courses.price": { $lt  :2350}})
 db.students.find({"purchased_courses.price": { $lte  :2500}})
 db.students.find({"purchased_courses.price": { $gte  :2500}})
 db.students.find({"purchased_courses.price": { $nin  :[2300,2400]}})
 db.students.find({"purchased_courses.price": { $in  :[2300,2400]}})
 
 $and, $or, $not, $nor operators:
 
 db.students.find({"purchased_courses.price": { $gt: 2400 }, "phone": {$lt: 3333}});
 or  db.students.find({$and: [{"purchased_courses.price": { $gt: 2400 }, "phone": {$lt: 3333}}]});
 
 db.students.find({"purchased_courses.price": {$not: { $gte: 2400 }}});  => Reverse the meaning means it will return the doc which have purchased_courses.price is less than 2400.
 db.students.find({"purchased_courses.price": {$not: { $gt: 2400 }}});  => Reverse the meaning means it will return the doc which have purchased_courses.price is less than or equal to 2400.
 
 db.students.find({$nor: [{"purchased_courses.price": 2400, "phone": 3333}]});
 
 
 
Aggregation Framework:
 
 db.students.aggregate( { $match: { phone: 2222 } });
 db.students.aggregate({ $match: { phone: 2222 } }, { $project: { purchased_courses: 1 , _id:0} } );
 db.students.aggregate({ $match: { phone: 2222 } }, { $project: { purchased_courses: 1 , name: 1, _id:0} } ).sort({"name": 1});
 db.students.aggregate({ $match: { phone: 2222 } }, { $project: { purchased_courses: 1 , name: 1, phone: 1, _id:0} } ).sort({"name": 1});
 
db.students.aggregate
(
[
    { $match: { phone: 2222 } }, 
    { $project: { purchased_courses: 1 , _id: 0} } , 
    { $group: 
            { 
                _id: { course: "$purchased_courses.course_name"}, 
                count: {$sum: 1}
            }
    } 
]
);

db.students.aggregate( [ { $match: { phone: 2222 } }, 
                         { $project: { purchased_courses: 1, _id: 0 } }, 
                         { $group: { _id: { course: "$purchased_courses.course_name" }, count: { $sum: 1 } } 
					 }]).sort({"course":-1})


db.students.aggregate
(
[
    { $match: { phone: 2222 } }, 
    { $project: { purchased_courses: 1 , _id: 0} } , 
    { $group: 
            { 
                _id: { course: "$purchased_courses.course_name"}, 
                count: {$sum: 1}
            }
    } 
]
).sort({"course":-1});

db.students.aggregate([ { $match: { phone: 2222 } }, 
                        { $project: { purchased_courses: 1, _id: 0 } }, 
						{ $group: { _id: { course: "$purchased_courses.course_name" }, count: { $sum: 1 } } }, 
						{ $sort: { "course": -1 }
					 }]);
	
complete ETL operation:
	
db.students.aggregate([ { $match: { phone: 2222 } }, 
	                        { $project: { purchased_courses: 1, _id: 0 } }, 
							{ $group: { _id: { course: "$purchased_courses.course_name" }, count: { $sum: 1 } } }, 
							{ $sort: { "course": -1 }}, 
	                        { $out: { db: "finaloutput" , coll: "finalcoll"}
						}]);

						
Add new column in the $project

db.students.aggregate( [{$match: { phone: 2222 } },
                        { $project: { purchased_courses: 1, mycollege: "ABV Inter College", _id: 0 } 
					 }]);

db.students.aggregate( [{$match: { phone: 2222 } },
                        { $project: { purchased_courses: 1, mycollege: { $concat: ["ABV Inter College ", "Miranpur Katra"]}, _id: 0 } 
					  }]);

db.students.aggregate( [{$match: { phone: 2222 } },
                        { $project: { purchased_courses: 1, 
						              mycollege: { $concat: ["ABV Inter College ", "Miranpur Katra"]}, 
									  course_details: {$concat: [ { $toUpper: "$purchased_courses.course_name" } , "$purchased_courses.price"]} , _id: 0 } 
					 }]);

for capital first letter: 
				db.students.aggregate( [{$match: { phone: 2222 } },
                        { $project: { purchased_courses: 1, 
						              mycollege: { $concat: ["ABV Inter College ", "Miranpur Katra"]}, 
									  course_details: { $concat: [ { $toUpper: "$title" } , 
									                  { $toUpper { $substrCP: [ "$first_name", 0, 1]}} , 
													  { $substrCP: [ "$first_name", 1, { $subtract: [ { $strLenCP: "$first_name"  }, 1 ]}]},
													   _id: 0 } 
					 }]);
					 
or 

db.students.aggregate( [{$match: { phone: 2222 } },
{ $project: { purchased_courses: 1, 
              mycollege: { $concat: ["ABV Inter College ", "Miranpur Katra"]},
              course_details: 
                         { $concat: 
                                   [ 
                                          { 
                                             $toUpper: "$title" 
                                          } , 
                                          { $toUpper:
                                                     { $substrCP: [ 
                                                                     "$first_name", 0, 1
                                                                  ]
                                                     }
                                          } , 
                                          { $substrCP: 
                                                      [ 
                                                           "$first_name", 1, 
                                                           { $subtract: [ 
                                                                          { $strLenCP: "$first_name"  }, 1 
                                                                      ]
                                                           }
                                                      ]
                                          },
                                          _id: 0 
                            } 
            }
]
);

db.students.aggregate( [{$match: { phone: 2222 } },
{ $project: purchased_courses: 1, name: 1, course_detail: "$purchased_courses.course"},
{ $project: { purchased_courses: 1, 
              name: 1,
              mycollege: { $concat: ["ABV Inter College ", "Miranpur Katra"]},
              course_details: 
                         { $concat: 
                                   [ 
                                          { 
                                             $toUpper: "$name" 
                                          } , 
                                          { $toUpper:
                                                     { $substrCP: [ 
                                                                     "$name", 0, 1
                                                                  ]
                                                     }
                                          } , 
                                          { $substrCP: 
                                                      [ 
                                                           "$name", 1, 
                                                           { $subtract: [ 
                                                                          { $strLenCP: "$name"  }, 1 
                                                                      ]
                                                           }
                                                      ]
                                          },
                                          _id: 0 
                            } 
            }
]
);


$toDate & $isoWeekYear operators

